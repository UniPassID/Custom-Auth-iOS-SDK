// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(sharedFFI)
    import sharedFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_shared_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_shared_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

public protocol SmartAccountProtocol {
    func address() -> [UInt8]
    func appId() -> String
    func chain() -> UInt64
    func isDeployed() async throws -> Bool
    func keysetJson() -> String
    func nonce() async throws -> UInt64
    func sendTransactions(_ transactions: [Transaction], _ options: SendingTransactionOptions?) async throws -> String
    func signHash(_ hash: [UInt8]) async throws -> [UInt8]
    func signMessage(_ message: [UInt8]) async throws -> [UInt8]
    func signTypedData(_ typedData: TypedData) async throws -> [UInt8]
    func simulateTransactions(_ transactions: [Transaction], _ simulateOptions: SimulateTransactionOptions?) async throws -> SimulateResult
    func switchChain(_ chainId: UInt64) throws
    func waitForTransaction(_ txHash: String) async throws -> TransactionReceipt?
}

public class SmartAccount: SmartAccountProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_shared_fn_free_smartaccount(pointer, $0) }
    }

    public func address() -> [UInt8] {
        return try! FfiConverterSequenceUInt8.lift(
            try!
                rustCall {
                    uniffi_shared_fn_method_smartaccount_address(self.pointer, $0)
                }
        )
    }

    public func appId() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_shared_fn_method_smartaccount_app_id(self.pointer, $0)
                }
        )
    }

    public func chain() -> UInt64 {
        return try! FfiConverterUInt64.lift(
            try!
                rustCall {
                    uniffi_shared_fn_method_smartaccount_chain(self.pointer, $0)
                }
        )
    }

    public func isDeployed() async throws -> Bool {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<Bool, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_shared_fn_method_smartaccount_is_deployed(
                    self.pointer,

                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerBoolTypeSmartAccountError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func keysetJson() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_shared_fn_method_smartaccount_keyset_json(self.pointer, $0)
                }
        )
    }

    public func nonce() async throws -> UInt64 {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<UInt64, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_shared_fn_method_smartaccount_nonce(
                    self.pointer,

                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerUInt64TypeSmartAccountError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func sendTransactions(_ transactions: [Transaction], _ options: SendingTransactionOptions?) async throws -> String {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<String, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_shared_fn_method_smartaccount_send_transactions(
                    self.pointer,

                    FfiConverterSequenceTypeTransaction.lower(transactions),
                    FfiConverterOptionTypeSendingTransactionOptions.lower(options),
                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerStringTypeSmartAccountError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func signHash(_ hash: [UInt8]) async throws -> [UInt8] {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<[UInt8], Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_shared_fn_method_smartaccount_sign_hash(
                    self.pointer,

                    FfiConverterSequenceUInt8.lower(hash),
                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerSequenceUInt8TypeSmartAccountError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func signMessage(_ message: [UInt8]) async throws -> [UInt8] {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<[UInt8], Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_shared_fn_method_smartaccount_sign_message(
                    self.pointer,

                    FfiConverterSequenceUInt8.lower(message),
                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerSequenceUInt8TypeSmartAccountError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func signTypedData(_ typedData: TypedData) async throws -> [UInt8] {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<[UInt8], Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_shared_fn_method_smartaccount_sign_typed_data(
                    self.pointer,

                    FfiConverterTypeTypedData.lower(typedData),
                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerSequenceUInt8TypeSmartAccountError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func simulateTransactions(_ transactions: [Transaction], _ simulateOptions: SimulateTransactionOptions?) async throws -> SimulateResult {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<SimulateResult, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_shared_fn_method_smartaccount_simulate_transactions(
                    self.pointer,

                    FfiConverterSequenceTypeTransaction.lower(transactions),
                    FfiConverterOptionTypeSimulateTransactionOptions.lower(simulateOptions),
                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerTypeSimulateResultTypeSmartAccountError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func switchChain(_ chainId: UInt64) throws {
        try
            rustCallWithError(FfiConverterTypeSmartAccountError.lift) {
                uniffi_shared_fn_method_smartaccount_switch_chain(self.pointer,
                                                                  FfiConverterUInt64.lower(chainId), $0)
            }
    }

    public func waitForTransaction(_ txHash: String) async throws -> TransactionReceipt? {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<TransactionReceipt?, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_shared_fn_method_smartaccount_wait_for_transaction(
                    self.pointer,

                    FfiConverterString.lower(txHash),
                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerOptionTypeTransactionReceiptTypeSmartAccountError,
                    &continuation,
                    $0
                )
            }
        }
    }
}

public struct FfiConverterTypeSmartAccount: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SmartAccount

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SmartAccount {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SmartAccount, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SmartAccount {
        return SmartAccount(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SmartAccount) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeSmartAccount_lift(_ pointer: UnsafeMutableRawPointer) throws -> SmartAccount {
    return try FfiConverterTypeSmartAccount.lift(pointer)
}

public func FfiConverterTypeSmartAccount_lower(_ value: SmartAccount) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSmartAccount.lower(value)
}

public protocol SmartAccountBuilderProtocol {
    func addChainOption(_ chain: UInt64, _ rpcUrl: String, _ httpRelayerUrl: String?) -> SmartAccountBuilder
    func addEmailGuardianKey(_ emailAddress: String, _ pepper: String, _ roleWeight: RoleWeight) throws -> SmartAccountBuilder
    func addGuardianKeys(_ keys: [Key]) throws -> SmartAccountBuilder
    func addOpenIdGuardianKey(_ idToken: String, _ roleWeight: RoleWeight) throws -> SmartAccountBuilder
    func addOpenIdWithEmailGuardianKey(_ idToken: String, _ emailAddress: String, _ roleWeight: RoleWeight) throws -> SmartAccountBuilder
    func build() async throws -> SmartAccount
    func withActiveChain(_ activeChain: UInt64) -> SmartAccountBuilder
    func withAppId(_ appId: String) -> SmartAccountBuilder
    func withKeysetJson(_ keysetJson: String) throws -> SmartAccountBuilder
    func withMasterKey(_ key: Key) throws -> SmartAccountBuilder
    func withMasterKeySigner(_ signer: Signer, _ roleWeight: RoleWeight?) -> SmartAccountBuilder
    func withUnipassServerUrl(_ unipassServerUrl: String) -> SmartAccountBuilder
}

public class SmartAccountBuilder: SmartAccountBuilderProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_shared_fn_constructor_smartaccountbuilder_new($0)
        })
    }

    deinit {
        try! rustCall { uniffi_shared_fn_free_smartaccountbuilder(pointer, $0) }
    }

    public func addChainOption(_ chain: UInt64, _ rpcUrl: String, _ httpRelayerUrl: String?) -> SmartAccountBuilder {
        return try! FfiConverterTypeSmartAccountBuilder.lift(
            try!
                rustCall {
                    uniffi_shared_fn_method_smartaccountbuilder_add_chain_option(self.pointer,
                                                                                 FfiConverterUInt64.lower(chain),
                                                                                 FfiConverterString.lower(rpcUrl),
                                                                                 FfiConverterOptionString.lower(httpRelayerUrl), $0)
                }
        )
    }

    public func addEmailGuardianKey(_ emailAddress: String, _ pepper: String, _ roleWeight: RoleWeight) throws -> SmartAccountBuilder {
        return try FfiConverterTypeSmartAccountBuilder.lift(
            rustCallWithError(FfiConverterTypeSmartAccountError.lift) {
                uniffi_shared_fn_method_smartaccountbuilder_add_email_guardian_key(self.pointer,
                                                                                   FfiConverterString.lower(emailAddress),
                                                                                   FfiConverterString.lower(pepper),
                                                                                   FfiConverterTypeRoleWeight.lower(roleWeight), $0)
            }
        )
    }

    public func addGuardianKeys(_ keys: [Key]) throws -> SmartAccountBuilder {
        return try FfiConverterTypeSmartAccountBuilder.lift(
            rustCallWithError(FfiConverterTypeSmartAccountError.lift) {
                uniffi_shared_fn_method_smartaccountbuilder_add_guardian_keys(self.pointer,
                                                                              FfiConverterSequenceTypeKey.lower(keys), $0)
            }
        )
    }

    public func addOpenIdGuardianKey(_ idToken: String, _ roleWeight: RoleWeight) throws -> SmartAccountBuilder {
        return try FfiConverterTypeSmartAccountBuilder.lift(
            rustCallWithError(FfiConverterTypeSmartAccountError.lift) {
                uniffi_shared_fn_method_smartaccountbuilder_add_open_id_guardian_key(self.pointer,
                                                                                     FfiConverterString.lower(idToken),
                                                                                     FfiConverterTypeRoleWeight.lower(roleWeight), $0)
            }
        )
    }

    public func addOpenIdWithEmailGuardianKey(_ idToken: String, _ emailAddress: String, _ roleWeight: RoleWeight) throws -> SmartAccountBuilder {
        return try FfiConverterTypeSmartAccountBuilder.lift(
            rustCallWithError(FfiConverterTypeSmartAccountError.lift) {
                uniffi_shared_fn_method_smartaccountbuilder_add_open_id_with_email_guardian_key(self.pointer,
                                                                                                FfiConverterString.lower(idToken),
                                                                                                FfiConverterString.lower(emailAddress),
                                                                                                FfiConverterTypeRoleWeight.lower(roleWeight), $0)
            }
        )
    }

    public func build() async throws -> SmartAccount {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<SmartAccount, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_shared_fn_method_smartaccountbuilder_build(
                    self.pointer,

                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerTypeSmartAccountTypeSmartAccountError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func withActiveChain(_ activeChain: UInt64) -> SmartAccountBuilder {
        return try! FfiConverterTypeSmartAccountBuilder.lift(
            try!
                rustCall {
                    uniffi_shared_fn_method_smartaccountbuilder_with_active_chain(self.pointer,
                                                                                  FfiConverterUInt64.lower(activeChain), $0)
                }
        )
    }

    public func withAppId(_ appId: String) -> SmartAccountBuilder {
        return try! FfiConverterTypeSmartAccountBuilder.lift(
            try!
                rustCall {
                    uniffi_shared_fn_method_smartaccountbuilder_with_app_id(self.pointer,
                                                                            FfiConverterString.lower(appId), $0)
                }
        )
    }

    public func withKeysetJson(_ keysetJson: String) throws -> SmartAccountBuilder {
        return try FfiConverterTypeSmartAccountBuilder.lift(
            rustCallWithError(FfiConverterTypeSmartAccountError.lift) {
                uniffi_shared_fn_method_smartaccountbuilder_with_keyset_json(self.pointer,
                                                                             FfiConverterString.lower(keysetJson), $0)
            }
        )
    }

    public func withMasterKey(_ key: Key) throws -> SmartAccountBuilder {
        return try FfiConverterTypeSmartAccountBuilder.lift(
            rustCallWithError(FfiConverterTypeSmartAccountError.lift) {
                uniffi_shared_fn_method_smartaccountbuilder_with_master_key(self.pointer,
                                                                            FfiConverterTypeKey.lower(key), $0)
            }
        )
    }

    public func withMasterKeySigner(_ signer: Signer, _ roleWeight: RoleWeight?) -> SmartAccountBuilder {
        return try! FfiConverterTypeSmartAccountBuilder.lift(
            try!
                rustCall {
                    uniffi_shared_fn_method_smartaccountbuilder_with_master_key_signer(self.pointer,
                                                                                       FfiConverterCallbackInterfaceSigner.lower(signer),
                                                                                       FfiConverterOptionTypeRoleWeight.lower(roleWeight), $0)
                }
        )
    }

    public func withUnipassServerUrl(_ unipassServerUrl: String) -> SmartAccountBuilder {
        return try! FfiConverterTypeSmartAccountBuilder.lift(
            try!
                rustCall {
                    uniffi_shared_fn_method_smartaccountbuilder_with_unipass_server_url(self.pointer,
                                                                                        FfiConverterString.lower(unipassServerUrl), $0)
                }
        )
    }
}

public struct FfiConverterTypeSmartAccountBuilder: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SmartAccountBuilder

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SmartAccountBuilder {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SmartAccountBuilder, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SmartAccountBuilder {
        return SmartAccountBuilder(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SmartAccountBuilder) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeSmartAccountBuilder_lift(_ pointer: UnsafeMutableRawPointer) throws -> SmartAccountBuilder {
    return try FfiConverterTypeSmartAccountBuilder.lift(pointer)
}

public func FfiConverterTypeSmartAccountBuilder_lower(_ value: SmartAccountBuilder) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSmartAccountBuilder.lower(value)
}

// Encapsulates an executor that can run Rust tasks
//
// On Swift, `Task.detached` can handle this we just need to know what priority to send it.
public struct UniFfiForeignExecutor {
    var priority: TaskPriority

    public init(priority: TaskPriority) {
        self.priority = priority
    }

    public init() {
        priority = Task.currentPriority
    }
}

private struct FfiConverterForeignExecutor: FfiConverter {
    typealias SwiftType = UniFfiForeignExecutor
    // Rust uses a pointer to represent the FfiConverterForeignExecutor, but we only need a u8.
    // let's use `Int`, which is equivalent to `size_t`
    typealias FfiType = Int

    static func lift(_ value: FfiType) throws -> SwiftType {
        UniFfiForeignExecutor(priority: TaskPriority(rawValue: numericCast(value)))
    }

    static func lower(_ value: SwiftType) -> FfiType {
        numericCast(value.priority.rawValue)
    }

    static func read(from _: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        fatalError("FfiConverterForeignExecutor.read not implemented yet")
    }

    static func write(_: SwiftType, into _: inout [UInt8]) {
        fatalError("FfiConverterForeignExecutor.read not implemented yet")
    }
}

private func uniffiForeignExecutorCallback(executorHandle: Int, delayMs: UInt32, rustTask: UniFfiRustTaskCallback?, taskData: UnsafeRawPointer?) {
    if let rustTask = rustTask {
        let executor = try! FfiConverterForeignExecutor.lift(executorHandle)
        Task.detached(priority: executor.priority) {
            if delayMs != 0 {
                let nanoseconds: UInt64 = numericCast(delayMs * 1_000_000)
                try! await Task.sleep(nanoseconds: nanoseconds)
            }
            rustTask(taskData)
        }
    }
    // No else branch: when rustTask is null, we should drop the foreign executor. However, since
    // its just a value type, we don't need to do anything here.
}

private func uniffiInitForeignExecutor() {
    uniffi_foreign_executor_callback_set(uniffiForeignExecutorCallback)
}

public struct Eip712Domain {
    public var name: String?
    public var version: String?
    public var chainId: UInt64?
    public var verifyingContract: String?
    public var salt: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String?, version: String?, chainId: UInt64?, verifyingContract: String?, salt: String?) {
        self.name = name
        self.version = version
        self.chainId = chainId
        self.verifyingContract = verifyingContract
        self.salt = salt
    }
}

extension Eip712Domain: Equatable, Hashable {
    public static func == (lhs: Eip712Domain, rhs: Eip712Domain) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.version != rhs.version {
            return false
        }
        if lhs.chainId != rhs.chainId {
            return false
        }
        if lhs.verifyingContract != rhs.verifyingContract {
            return false
        }
        if lhs.salt != rhs.salt {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(version)
        hasher.combine(chainId)
        hasher.combine(verifyingContract)
        hasher.combine(salt)
    }
}

public struct FfiConverterTypeEIP712Domain: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Eip712Domain {
        return try Eip712Domain(
            name: FfiConverterOptionString.read(from: &buf),
            version: FfiConverterOptionString.read(from: &buf),
            chainId: FfiConverterOptionUInt64.read(from: &buf),
            verifyingContract: FfiConverterOptionString.read(from: &buf),
            salt: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: Eip712Domain, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.name, into: &buf)
        FfiConverterOptionString.write(value.version, into: &buf)
        FfiConverterOptionUInt64.write(value.chainId, into: &buf)
        FfiConverterOptionString.write(value.verifyingContract, into: &buf)
        FfiConverterOptionString.write(value.salt, into: &buf)
    }
}

public func FfiConverterTypeEIP712Domain_lift(_ buf: RustBuffer) throws -> Eip712Domain {
    return try FfiConverterTypeEIP712Domain.lift(buf)
}

public func FfiConverterTypeEIP712Domain_lower(_ value: Eip712Domain) -> RustBuffer {
    return FfiConverterTypeEIP712Domain.lower(value)
}

public struct Eip712DomainType {
    public var name: String
    public var type: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, type: String) {
        self.name = name
        self.type = type
    }
}

extension Eip712DomainType: Equatable, Hashable {
    public static func == (lhs: Eip712DomainType, rhs: Eip712DomainType) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.type != rhs.type {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(type)
    }
}

public struct FfiConverterTypeEip712DomainType: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Eip712DomainType {
        return try Eip712DomainType(
            name: FfiConverterString.read(from: &buf),
            type: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Eip712DomainType, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.type, into: &buf)
    }
}

public func FfiConverterTypeEip712DomainType_lift(_ buf: RustBuffer) throws -> Eip712DomainType {
    return try FfiConverterTypeEip712DomainType.lift(buf)
}

public func FfiConverterTypeEip712DomainType_lower(_ value: Eip712DomainType) -> RustBuffer {
    return FfiConverterTypeEip712DomainType.lower(value)
}

public struct FeeOption {
    public var token: String
    public var name: String
    public var symbol: String
    public var decimals: UInt8
    public var to: String
    public var amount: String
    public var error: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(token: String, name: String, symbol: String, decimals: UInt8, to: String, amount: String, error: String?) {
        self.token = token
        self.name = name
        self.symbol = symbol
        self.decimals = decimals
        self.to = to
        self.amount = amount
        self.error = error
    }
}

extension FeeOption: Equatable, Hashable {
    public static func == (lhs: FeeOption, rhs: FeeOption) -> Bool {
        if lhs.token != rhs.token {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        if lhs.symbol != rhs.symbol {
            return false
        }
        if lhs.decimals != rhs.decimals {
            return false
        }
        if lhs.to != rhs.to {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.error != rhs.error {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(token)
        hasher.combine(name)
        hasher.combine(symbol)
        hasher.combine(decimals)
        hasher.combine(to)
        hasher.combine(amount)
        hasher.combine(error)
    }
}

public struct FfiConverterTypeFeeOption: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FeeOption {
        return try FeeOption(
            token: FfiConverterString.read(from: &buf),
            name: FfiConverterString.read(from: &buf),
            symbol: FfiConverterString.read(from: &buf),
            decimals: FfiConverterUInt8.read(from: &buf),
            to: FfiConverterString.read(from: &buf),
            amount: FfiConverterString.read(from: &buf),
            error: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: FeeOption, into buf: inout [UInt8]) {
        FfiConverterString.write(value.token, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.symbol, into: &buf)
        FfiConverterUInt8.write(value.decimals, into: &buf)
        FfiConverterString.write(value.to, into: &buf)
        FfiConverterString.write(value.amount, into: &buf)
        FfiConverterOptionString.write(value.error, into: &buf)
    }
}

public func FfiConverterTypeFeeOption_lift(_ buf: RustBuffer) throws -> FeeOption {
    return try FfiConverterTypeFeeOption.lift(buf)
}

public func FfiConverterTypeFeeOption_lower(_ value: FeeOption) -> RustBuffer {
    return FfiConverterTypeFeeOption.lower(value)
}

public struct Log {
    public var address: String
    public var topics: [String]
    public var data: String
    public var blockHash: String?
    public var blockNumber: UInt64?
    public var transactionHash: String?
    public var transactionIndex: UInt64?
    public var logIndex: String?
    public var transactionLogIndex: String?
    public var logType: String?
    public var removed: Bool?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(address: String, topics: [String], data: String, blockHash: String?, blockNumber: UInt64?, transactionHash: String?, transactionIndex: UInt64?, logIndex: String?, transactionLogIndex: String?, logType: String?, removed: Bool?) {
        self.address = address
        self.topics = topics
        self.data = data
        self.blockHash = blockHash
        self.blockNumber = blockNumber
        self.transactionHash = transactionHash
        self.transactionIndex = transactionIndex
        self.logIndex = logIndex
        self.transactionLogIndex = transactionLogIndex
        self.logType = logType
        self.removed = removed
    }
}

extension Log: Equatable, Hashable {
    public static func == (lhs: Log, rhs: Log) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.topics != rhs.topics {
            return false
        }
        if lhs.data != rhs.data {
            return false
        }
        if lhs.blockHash != rhs.blockHash {
            return false
        }
        if lhs.blockNumber != rhs.blockNumber {
            return false
        }
        if lhs.transactionHash != rhs.transactionHash {
            return false
        }
        if lhs.transactionIndex != rhs.transactionIndex {
            return false
        }
        if lhs.logIndex != rhs.logIndex {
            return false
        }
        if lhs.transactionLogIndex != rhs.transactionLogIndex {
            return false
        }
        if lhs.logType != rhs.logType {
            return false
        }
        if lhs.removed != rhs.removed {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(topics)
        hasher.combine(data)
        hasher.combine(blockHash)
        hasher.combine(blockNumber)
        hasher.combine(transactionHash)
        hasher.combine(transactionIndex)
        hasher.combine(logIndex)
        hasher.combine(transactionLogIndex)
        hasher.combine(logType)
        hasher.combine(removed)
    }
}

public struct FfiConverterTypeLog: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Log {
        return try Log(
            address: FfiConverterString.read(from: &buf),
            topics: FfiConverterSequenceString.read(from: &buf),
            data: FfiConverterString.read(from: &buf),
            blockHash: FfiConverterOptionString.read(from: &buf),
            blockNumber: FfiConverterOptionUInt64.read(from: &buf),
            transactionHash: FfiConverterOptionString.read(from: &buf),
            transactionIndex: FfiConverterOptionUInt64.read(from: &buf),
            logIndex: FfiConverterOptionString.read(from: &buf),
            transactionLogIndex: FfiConverterOptionString.read(from: &buf),
            logType: FfiConverterOptionString.read(from: &buf),
            removed: FfiConverterOptionBool.read(from: &buf)
        )
    }

    public static func write(_ value: Log, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterSequenceString.write(value.topics, into: &buf)
        FfiConverterString.write(value.data, into: &buf)
        FfiConverterOptionString.write(value.blockHash, into: &buf)
        FfiConverterOptionUInt64.write(value.blockNumber, into: &buf)
        FfiConverterOptionString.write(value.transactionHash, into: &buf)
        FfiConverterOptionUInt64.write(value.transactionIndex, into: &buf)
        FfiConverterOptionString.write(value.logIndex, into: &buf)
        FfiConverterOptionString.write(value.transactionLogIndex, into: &buf)
        FfiConverterOptionString.write(value.logType, into: &buf)
        FfiConverterOptionBool.write(value.removed, into: &buf)
    }
}

public func FfiConverterTypeLog_lift(_ buf: RustBuffer) throws -> Log {
    return try FfiConverterTypeLog.lift(buf)
}

public func FfiConverterTypeLog_lower(_ value: Log) -> RustBuffer {
    return FfiConverterTypeLog.lower(value)
}

public struct RoleWeight {
    public var ownerRoleWeight: UInt32
    public var assetsopRoleWeight: UInt32
    public var guardianRoleWeight: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(ownerRoleWeight: UInt32, assetsopRoleWeight: UInt32, guardianRoleWeight: UInt32) {
        self.ownerRoleWeight = ownerRoleWeight
        self.assetsopRoleWeight = assetsopRoleWeight
        self.guardianRoleWeight = guardianRoleWeight
    }
}

extension RoleWeight: Equatable, Hashable {
    public static func == (lhs: RoleWeight, rhs: RoleWeight) -> Bool {
        if lhs.ownerRoleWeight != rhs.ownerRoleWeight {
            return false
        }
        if lhs.assetsopRoleWeight != rhs.assetsopRoleWeight {
            return false
        }
        if lhs.guardianRoleWeight != rhs.guardianRoleWeight {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(ownerRoleWeight)
        hasher.combine(assetsopRoleWeight)
        hasher.combine(guardianRoleWeight)
    }
}

public struct FfiConverterTypeRoleWeight: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RoleWeight {
        return try RoleWeight(
            ownerRoleWeight: FfiConverterUInt32.read(from: &buf),
            assetsopRoleWeight: FfiConverterUInt32.read(from: &buf),
            guardianRoleWeight: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: RoleWeight, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.ownerRoleWeight, into: &buf)
        FfiConverterUInt32.write(value.assetsopRoleWeight, into: &buf)
        FfiConverterUInt32.write(value.guardianRoleWeight, into: &buf)
    }
}

public func FfiConverterTypeRoleWeight_lift(_ buf: RustBuffer) throws -> RoleWeight {
    return try FfiConverterTypeRoleWeight.lift(buf)
}

public func FfiConverterTypeRoleWeight_lower(_ value: RoleWeight) -> RustBuffer {
    return FfiConverterTypeRoleWeight.lower(value)
}

public struct SendingTransactionOptions {
    public var fee: FeeOption?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(fee: FeeOption?) {
        self.fee = fee
    }
}

extension SendingTransactionOptions: Equatable, Hashable {
    public static func == (lhs: SendingTransactionOptions, rhs: SendingTransactionOptions) -> Bool {
        if lhs.fee != rhs.fee {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(fee)
    }
}

public struct FfiConverterTypeSendingTransactionOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendingTransactionOptions {
        return try SendingTransactionOptions(
            fee: FfiConverterOptionTypeFeeOption.read(from: &buf)
        )
    }

    public static func write(_ value: SendingTransactionOptions, into buf: inout [UInt8]) {
        FfiConverterOptionTypeFeeOption.write(value.fee, into: &buf)
    }
}

public func FfiConverterTypeSendingTransactionOptions_lift(_ buf: RustBuffer) throws -> SendingTransactionOptions {
    return try FfiConverterTypeSendingTransactionOptions.lift(buf)
}

public func FfiConverterTypeSendingTransactionOptions_lower(_ value: SendingTransactionOptions) -> RustBuffer {
    return FfiConverterTypeSendingTransactionOptions.lower(value)
}

public struct SimulateResult {
    public var isFeeRequired: Bool
    public var feeOptions: [FeeOption]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(isFeeRequired: Bool, feeOptions: [FeeOption]) {
        self.isFeeRequired = isFeeRequired
        self.feeOptions = feeOptions
    }
}

extension SimulateResult: Equatable, Hashable {
    public static func == (lhs: SimulateResult, rhs: SimulateResult) -> Bool {
        if lhs.isFeeRequired != rhs.isFeeRequired {
            return false
        }
        if lhs.feeOptions != rhs.feeOptions {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(isFeeRequired)
        hasher.combine(feeOptions)
    }
}

public struct FfiConverterTypeSimulateResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SimulateResult {
        return try SimulateResult(
            isFeeRequired: FfiConverterBool.read(from: &buf),
            feeOptions: FfiConverterSequenceTypeFeeOption.read(from: &buf)
        )
    }

    public static func write(_ value: SimulateResult, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.isFeeRequired, into: &buf)
        FfiConverterSequenceTypeFeeOption.write(value.feeOptions, into: &buf)
    }
}

public func FfiConverterTypeSimulateResult_lift(_ buf: RustBuffer) throws -> SimulateResult {
    return try FfiConverterTypeSimulateResult.lift(buf)
}

public func FfiConverterTypeSimulateResult_lower(_ value: SimulateResult) -> RustBuffer {
    return FfiConverterTypeSimulateResult.lower(value)
}

public struct SimulateTransactionOptions {
    public var token: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(token: String?) {
        self.token = token
    }
}

extension SimulateTransactionOptions: Equatable, Hashable {
    public static func == (lhs: SimulateTransactionOptions, rhs: SimulateTransactionOptions) -> Bool {
        if lhs.token != rhs.token {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(token)
    }
}

public struct FfiConverterTypeSimulateTransactionOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SimulateTransactionOptions {
        return try SimulateTransactionOptions(
            token: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: SimulateTransactionOptions, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.token, into: &buf)
    }
}

public func FfiConverterTypeSimulateTransactionOptions_lift(_ buf: RustBuffer) throws -> SimulateTransactionOptions {
    return try FfiConverterTypeSimulateTransactionOptions.lift(buf)
}

public func FfiConverterTypeSimulateTransactionOptions_lower(_ value: SimulateTransactionOptions) -> RustBuffer {
    return FfiConverterTypeSimulateTransactionOptions.lower(value)
}

public struct Transaction {
    public var to: String
    public var data: String
    public var value: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(to: String, data: String, value: String) {
        self.to = to
        self.data = data
        self.value = value
    }
}

extension Transaction: Equatable, Hashable {
    public static func == (lhs: Transaction, rhs: Transaction) -> Bool {
        if lhs.to != rhs.to {
            return false
        }
        if lhs.data != rhs.data {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(to)
        hasher.combine(data)
        hasher.combine(value)
    }
}

public struct FfiConverterTypeTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Transaction {
        return try Transaction(
            to: FfiConverterString.read(from: &buf),
            data: FfiConverterString.read(from: &buf),
            value: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Transaction, into buf: inout [UInt8]) {
        FfiConverterString.write(value.to, into: &buf)
        FfiConverterString.write(value.data, into: &buf)
        FfiConverterString.write(value.value, into: &buf)
    }
}

public func FfiConverterTypeTransaction_lift(_ buf: RustBuffer) throws -> Transaction {
    return try FfiConverterTypeTransaction.lift(buf)
}

public func FfiConverterTypeTransaction_lower(_ value: Transaction) -> RustBuffer {
    return FfiConverterTypeTransaction.lower(value)
}

public struct TransactionReceipt {
    public var transactionHash: String
    public var transactionIndex: UInt64
    public var blockHash: String?
    public var blockNumber: UInt64?
    public var from: String
    public var to: String?
    public var cumulativeGasUsed: String
    public var gasUsed: String?
    public var contractAddress: String?
    public var logs: [Log]
    public var status: UInt64?
    public var root: String?
    public var transactionType: UInt64?
    public var effectiveGasPrice: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(transactionHash: String, transactionIndex: UInt64, blockHash: String?, blockNumber: UInt64?, from: String, to: String?, cumulativeGasUsed: String, gasUsed: String?, contractAddress: String?, logs: [Log], status: UInt64?, root: String?, transactionType: UInt64?, effectiveGasPrice: String?) {
        self.transactionHash = transactionHash
        self.transactionIndex = transactionIndex
        self.blockHash = blockHash
        self.blockNumber = blockNumber
        self.from = from
        self.to = to
        self.cumulativeGasUsed = cumulativeGasUsed
        self.gasUsed = gasUsed
        self.contractAddress = contractAddress
        self.logs = logs
        self.status = status
        self.root = root
        self.transactionType = transactionType
        self.effectiveGasPrice = effectiveGasPrice
    }
}

extension TransactionReceipt: Equatable, Hashable {
    public static func == (lhs: TransactionReceipt, rhs: TransactionReceipt) -> Bool {
        if lhs.transactionHash != rhs.transactionHash {
            return false
        }
        if lhs.transactionIndex != rhs.transactionIndex {
            return false
        }
        if lhs.blockHash != rhs.blockHash {
            return false
        }
        if lhs.blockNumber != rhs.blockNumber {
            return false
        }
        if lhs.from != rhs.from {
            return false
        }
        if lhs.to != rhs.to {
            return false
        }
        if lhs.cumulativeGasUsed != rhs.cumulativeGasUsed {
            return false
        }
        if lhs.gasUsed != rhs.gasUsed {
            return false
        }
        if lhs.contractAddress != rhs.contractAddress {
            return false
        }
        if lhs.logs != rhs.logs {
            return false
        }
        if lhs.status != rhs.status {
            return false
        }
        if lhs.root != rhs.root {
            return false
        }
        if lhs.transactionType != rhs.transactionType {
            return false
        }
        if lhs.effectiveGasPrice != rhs.effectiveGasPrice {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(transactionHash)
        hasher.combine(transactionIndex)
        hasher.combine(blockHash)
        hasher.combine(blockNumber)
        hasher.combine(from)
        hasher.combine(to)
        hasher.combine(cumulativeGasUsed)
        hasher.combine(gasUsed)
        hasher.combine(contractAddress)
        hasher.combine(logs)
        hasher.combine(status)
        hasher.combine(root)
        hasher.combine(transactionType)
        hasher.combine(effectiveGasPrice)
    }
}

public struct FfiConverterTypeTransactionReceipt: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionReceipt {
        return try TransactionReceipt(
            transactionHash: FfiConverterString.read(from: &buf),
            transactionIndex: FfiConverterUInt64.read(from: &buf),
            blockHash: FfiConverterOptionString.read(from: &buf),
            blockNumber: FfiConverterOptionUInt64.read(from: &buf),
            from: FfiConverterString.read(from: &buf),
            to: FfiConverterOptionString.read(from: &buf),
            cumulativeGasUsed: FfiConverterString.read(from: &buf),
            gasUsed: FfiConverterOptionString.read(from: &buf),
            contractAddress: FfiConverterOptionString.read(from: &buf),
            logs: FfiConverterSequenceTypeLog.read(from: &buf),
            status: FfiConverterOptionUInt64.read(from: &buf),
            root: FfiConverterOptionString.read(from: &buf),
            transactionType: FfiConverterOptionUInt64.read(from: &buf),
            effectiveGasPrice: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: TransactionReceipt, into buf: inout [UInt8]) {
        FfiConverterString.write(value.transactionHash, into: &buf)
        FfiConverterUInt64.write(value.transactionIndex, into: &buf)
        FfiConverterOptionString.write(value.blockHash, into: &buf)
        FfiConverterOptionUInt64.write(value.blockNumber, into: &buf)
        FfiConverterString.write(value.from, into: &buf)
        FfiConverterOptionString.write(value.to, into: &buf)
        FfiConverterString.write(value.cumulativeGasUsed, into: &buf)
        FfiConverterOptionString.write(value.gasUsed, into: &buf)
        FfiConverterOptionString.write(value.contractAddress, into: &buf)
        FfiConverterSequenceTypeLog.write(value.logs, into: &buf)
        FfiConverterOptionUInt64.write(value.status, into: &buf)
        FfiConverterOptionString.write(value.root, into: &buf)
        FfiConverterOptionUInt64.write(value.transactionType, into: &buf)
        FfiConverterOptionString.write(value.effectiveGasPrice, into: &buf)
    }
}

public func FfiConverterTypeTransactionReceipt_lift(_ buf: RustBuffer) throws -> TransactionReceipt {
    return try FfiConverterTypeTransactionReceipt.lift(buf)
}

public func FfiConverterTypeTransactionReceipt_lower(_ value: TransactionReceipt) -> RustBuffer {
    return FfiConverterTypeTransactionReceipt.lower(value)
}

public struct TypedData {
    public var domain: Eip712Domain
    public var types: [String: [Eip712DomainType]]
    public var primaryType: String
    public var message: [String: Value]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(domain: Eip712Domain, types: [String: [Eip712DomainType]], primaryType: String, message: [String: Value]) {
        self.domain = domain
        self.types = types
        self.primaryType = primaryType
        self.message = message
    }
}

extension TypedData: Equatable, Hashable {
    public static func == (lhs: TypedData, rhs: TypedData) -> Bool {
        if lhs.domain != rhs.domain {
            return false
        }
        if lhs.types != rhs.types {
            return false
        }
        if lhs.primaryType != rhs.primaryType {
            return false
        }
        if lhs.message != rhs.message {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(domain)
        hasher.combine(types)
        hasher.combine(primaryType)
        hasher.combine(message)
    }
}

public struct FfiConverterTypeTypedData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TypedData {
        return try TypedData(
            domain: FfiConverterTypeEIP712Domain.read(from: &buf),
            types: FfiConverterDictionaryStringSequenceTypeEip712DomainType.read(from: &buf),
            primaryType: FfiConverterString.read(from: &buf),
            message: FfiConverterDictionaryStringTypeValue.read(from: &buf)
        )
    }

    public static func write(_ value: TypedData, into buf: inout [UInt8]) {
        FfiConverterTypeEIP712Domain.write(value.domain, into: &buf)
        FfiConverterDictionaryStringSequenceTypeEip712DomainType.write(value.types, into: &buf)
        FfiConverterString.write(value.primaryType, into: &buf)
        FfiConverterDictionaryStringTypeValue.write(value.message, into: &buf)
    }
}

public func FfiConverterTypeTypedData_lift(_ buf: RustBuffer) throws -> TypedData {
    return try FfiConverterTypeTypedData.lift(buf)
}

public func FfiConverterTypeTypedData_lower(_ value: TypedData) -> RustBuffer {
    return FfiConverterTypeTypedData.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Key {
    case eoaSigner(signer: Signer, roleWeight: RoleWeight)
    case keyEmail(emailAddress: String, roleWeight: RoleWeight)
    case keyOpenId(idToken: String, roleWeight: RoleWeight)
    case keyOpenIdWithEmail(idToken: String, emailAddress: String, roleWeight: RoleWeight)
}

public struct FfiConverterTypeKey: FfiConverterRustBuffer {
    typealias SwiftType = Key

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Key {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .eoaSigner(
                signer: FfiConverterCallbackInterfaceSigner.read(from: &buf),
                roleWeight: FfiConverterTypeRoleWeight.read(from: &buf)
            )

        case 2: return try .keyEmail(
                emailAddress: FfiConverterString.read(from: &buf),
                roleWeight: FfiConverterTypeRoleWeight.read(from: &buf)
            )

        case 3: return try .keyOpenId(
                idToken: FfiConverterString.read(from: &buf),
                roleWeight: FfiConverterTypeRoleWeight.read(from: &buf)
            )

        case 4: return try .keyOpenIdWithEmail(
                idToken: FfiConverterString.read(from: &buf),
                emailAddress: FfiConverterString.read(from: &buf),
                roleWeight: FfiConverterTypeRoleWeight.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Key, into buf: inout [UInt8]) {
        switch value {
        case let .eoaSigner(signer, roleWeight):
            writeInt(&buf, Int32(1))
            FfiConverterCallbackInterfaceSigner.write(signer, into: &buf)
            FfiConverterTypeRoleWeight.write(roleWeight, into: &buf)

        case let .keyEmail(emailAddress, roleWeight):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(emailAddress, into: &buf)
            FfiConverterTypeRoleWeight.write(roleWeight, into: &buf)

        case let .keyOpenId(idToken, roleWeight):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(idToken, into: &buf)
            FfiConverterTypeRoleWeight.write(roleWeight, into: &buf)

        case let .keyOpenIdWithEmail(idToken, emailAddress, roleWeight):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(idToken, into: &buf)
            FfiConverterString.write(emailAddress, into: &buf)
            FfiConverterTypeRoleWeight.write(roleWeight, into: &buf)
        }
    }
}

public func FfiConverterTypeKey_lift(_ buf: RustBuffer) throws -> Key {
    return try FfiConverterTypeKey.lift(buf)
}

public func FfiConverterTypeKey_lower(_ value: Key) -> RustBuffer {
    return FfiConverterTypeKey.lower(value)
}


public enum SignerError {
    // Simple error enums only carry a message
    case CustomAuthSignerError(message: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeSignerError.lift(error)
    }
}

public struct FfiConverterTypeSignerError: FfiConverterRustBuffer {
    typealias SwiftType = SignerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .CustomAuthSignerError(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SignerError, into buf: inout [UInt8]) {
        switch value {
        case let .CustomAuthSignerError(message):
            writeInt(&buf, Int32(1))
        }
    }
}

extension SignerError: Equatable, Hashable {}

extension SignerError: Error {}

public enum SmartAccountError {
    // Simple error enums only carry a message
    case ParseChainError(message: String)

    // Simple error enums only carry a message
    case SmartAccountBuilderError(message: String)

    // Simple error enums only carry a message
    case CustomAuthSmartAccountError(message: String)

    // Simple error enums only carry a message
    case InvalidHash(message: String)

    // Simple error enums only carry a message
    case InvalidBuilder(message: String)

    // Simple error enums only carry a message
    case UnexpectedError(message: String)

    // Simple error enums only carry a message
    case TypeParseError(message: String)

    // Simple error enums only carry a message
    case HttpRelayerClientError(message: String)

    // Simple error enums only carry a message
    case Eip712Error(message: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeSmartAccountError.lift(error)
    }
}

public struct FfiConverterTypeSmartAccountError: FfiConverterRustBuffer {
    typealias SwiftType = SmartAccountError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SmartAccountError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .ParseChainError(
                message: FfiConverterString.read(from: &buf)
            )

        case 2: return try .SmartAccountBuilderError(
                message: FfiConverterString.read(from: &buf)
            )

        case 3: return try .CustomAuthSmartAccountError(
                message: FfiConverterString.read(from: &buf)
            )

        case 4: return try .InvalidHash(
                message: FfiConverterString.read(from: &buf)
            )

        case 5: return try .InvalidBuilder(
                message: FfiConverterString.read(from: &buf)
            )

        case 6: return try .UnexpectedError(
                message: FfiConverterString.read(from: &buf)
            )

        case 7: return try .TypeParseError(
                message: FfiConverterString.read(from: &buf)
            )

        case 8: return try .HttpRelayerClientError(
                message: FfiConverterString.read(from: &buf)
            )

        case 9: return try .Eip712Error(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SmartAccountError, into buf: inout [UInt8]) {
        switch value {
        case let .ParseChainError(message):
            writeInt(&buf, Int32(1))
        case let .SmartAccountBuilderError(message):
            writeInt(&buf, Int32(2))
        case let .CustomAuthSmartAccountError(message):
            writeInt(&buf, Int32(3))
        case let .InvalidHash(message):
            writeInt(&buf, Int32(4))
        case let .InvalidBuilder(message):
            writeInt(&buf, Int32(5))
        case let .UnexpectedError(message):
            writeInt(&buf, Int32(6))
        case let .TypeParseError(message):
            writeInt(&buf, Int32(7))
        case let .HttpRelayerClientError(message):
            writeInt(&buf, Int32(8))
        case let .Eip712Error(message):
            writeInt(&buf, Int32(9))
        }
    }
}

extension SmartAccountError: Equatable, Hashable {}

extension SmartAccountError: Error {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Value {
    case nullValue
    case boolValue(inner: Bool)
    case numberValue(inner: Double)
    case stringValue(inner: String)
    case arrayValue(inner: [Value])
    case objectValue(inner: [String: Value])
}

public struct FfiConverterTypeValue: FfiConverterRustBuffer {
    typealias SwiftType = Value

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Value {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .nullValue

        case 2: return try .boolValue(
                inner: FfiConverterBool.read(from: &buf)
            )

        case 3: return try .numberValue(
                inner: FfiConverterDouble.read(from: &buf)
            )

        case 4: return try .stringValue(
                inner: FfiConverterString.read(from: &buf)
            )

        case 5: return try .arrayValue(
                inner: FfiConverterSequenceTypeValue.read(from: &buf)
            )

        case 6: return try .objectValue(
                inner: FfiConverterDictionaryStringTypeValue.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Value, into buf: inout [UInt8]) {
        switch value {
        case .nullValue:
            writeInt(&buf, Int32(1))

        case let .boolValue(inner):
            writeInt(&buf, Int32(2))
            FfiConverterBool.write(inner, into: &buf)

        case let .numberValue(inner):
            writeInt(&buf, Int32(3))
            FfiConverterDouble.write(inner, into: &buf)

        case let .stringValue(inner):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(inner, into: &buf)

        case let .arrayValue(inner):
            writeInt(&buf, Int32(5))
            FfiConverterSequenceTypeValue.write(inner, into: &buf)

        case let .objectValue(inner):
            writeInt(&buf, Int32(6))
            FfiConverterDictionaryStringTypeValue.write(inner, into: &buf)
        }
    }
}

public func FfiConverterTypeValue_lift(_ buf: RustBuffer) throws -> Value {
    return try FfiConverterTypeValue.lift(buf)
}

public func FfiConverterTypeValue_lower(_ value: Value) -> RustBuffer {
    return FfiConverterTypeValue.lower(value)
}

extension Value: Equatable, Hashable {}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private typealias UniFFICallbackHandle = UInt64
private class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 0
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Declaration and FfiConverters for Signer Callback Interface

public protocol Signer: AnyObject {
    func address() -> String
    func signMessage(_ message: [UInt8]) throws -> String
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceSigner: ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

        func invokeAddress(_ swiftCallbackInterface: Signer, _: UnsafePointer<UInt8>, _: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            func makeCall() throws -> Int32 {
                let result = try swiftCallbackInterface.address(
                )
                var writer = [UInt8]()
                FfiConverterString.write(result, into: &writer)
                out_buf.pointee = RustBuffer(bytes: writer)
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        func invokeSignMessage(_ swiftCallbackInterface: Signer, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
            func makeCall() throws -> Int32 {
                let result = try swiftCallbackInterface.signMessage(
                    FfiConverterSequenceUInt8.read(from: &reader)
                )
                var writer = [UInt8]()
                FfiConverterString.write(result, into: &writer)
                out_buf.pointee = RustBuffer(bytes: writer)
                return UNIFFI_CALLBACK_SUCCESS
            }
            do {
                return try makeCall()
            } catch let error as SignerError {
                out_buf.pointee = FfiConverterTypeSignerError.lower(error)
                return UNIFFI_CALLBACK_ERROR
            }
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceSigner.drop(handle: handle)
            // Sucessful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            let cb: Signer
            do {
                cb = try FfiConverterCallbackInterfaceSigner.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("Signer: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeAddress(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        case 2:
            let cb: Signer
            do {
                cb = try FfiConverterCallbackInterfaceSigner.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("Signer: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeSignMessage(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    }

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceSigner {
    private static let initCallbackOnce: () = {
        // Swift ensures this initializer code will once run once, even when accessed by multiple threads.
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            uniffi_shared_fn_init_callback_signer(foreignCallbackCallbackInterfaceSigner, err)
        }
    }()

    private static func ensureCallbackinitialized() {
        _ = initCallbackOnce
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<Signer>()
}

extension FfiConverterCallbackInterfaceSigner: FfiConverter {
    typealias SwiftType = Signer
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized()
        writeInt(&buf, lower(v))
    }
}

private struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionBool: FfiConverterRustBuffer {
    typealias SwiftType = Bool?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterBool.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterBool.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeFeeOption: FfiConverterRustBuffer {
    typealias SwiftType = FeeOption?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeFeeOption.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeFeeOption.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeRoleWeight: FfiConverterRustBuffer {
    typealias SwiftType = RoleWeight?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeRoleWeight.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRoleWeight.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeSendingTransactionOptions: FfiConverterRustBuffer {
    typealias SwiftType = SendingTransactionOptions?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeSendingTransactionOptions.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSendingTransactionOptions.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeSimulateTransactionOptions: FfiConverterRustBuffer {
    typealias SwiftType = SimulateTransactionOptions?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeSimulateTransactionOptions.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSimulateTransactionOptions.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeTransactionReceipt: FfiConverterRustBuffer {
    typealias SwiftType = TransactionReceipt?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeTransactionReceipt.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTransactionReceipt.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeEip712DomainType: FfiConverterRustBuffer {
    typealias SwiftType = [Eip712DomainType]

    public static func write(_ value: [Eip712DomainType], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeEip712DomainType.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Eip712DomainType] {
        let len: Int32 = try readInt(&buf)
        var seq = [Eip712DomainType]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeEip712DomainType.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeFeeOption: FfiConverterRustBuffer {
    typealias SwiftType = [FeeOption]

    public static func write(_ value: [FeeOption], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeFeeOption.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [FeeOption] {
        let len: Int32 = try readInt(&buf)
        var seq = [FeeOption]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeFeeOption.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeLog: FfiConverterRustBuffer {
    typealias SwiftType = [Log]

    public static func write(_ value: [Log], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeLog.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Log] {
        let len: Int32 = try readInt(&buf)
        var seq = [Log]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeLog.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeTransaction: FfiConverterRustBuffer {
    typealias SwiftType = [Transaction]

    public static func write(_ value: [Transaction], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTransaction.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Transaction] {
        let len: Int32 = try readInt(&buf)
        var seq = [Transaction]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeTransaction.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeKey: FfiConverterRustBuffer {
    typealias SwiftType = [Key]

    public static func write(_ value: [Key], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeKey.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Key] {
        let len: Int32 = try readInt(&buf)
        var seq = [Key]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeKey.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeValue: FfiConverterRustBuffer {
    typealias SwiftType = [Value]

    public static func write(_ value: [Value], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeValue.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Value] {
        let len: Int32 = try readInt(&buf)
        var seq = [Value]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeValue.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterDictionaryStringTypeValue: FfiConverterRustBuffer {
    public static func write(_ value: [String: Value], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeValue.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: Value] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: Value]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeValue.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

private struct FfiConverterDictionaryStringSequenceTypeEip712DomainType: FfiConverterRustBuffer {
    public static func write(_ value: [String: [Eip712DomainType]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterSequenceTypeEip712DomainType.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: [Eip712DomainType]] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: [Eip712DomainType]]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterSequenceTypeEip712DomainType.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
} // Callbacks for async functions

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
private func uniffiFutureCallbackHandlerVoid(
    rawContinutation: UnsafeRawPointer,
    returnValue _: UInt8,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<Void, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: nil)
        continuation.pointee.resume(returning: ())
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerVoidTypeSmartAccountError(
    rawContinutation: UnsafeRawPointer,
    returnValue _: UInt8,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<Void, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: FfiConverterTypeSmartAccountError.lift)
        continuation.pointee.resume(returning: ())
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerUInt64(
    rawContinutation: UnsafeRawPointer,
    returnValue: UInt64,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<UInt64, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: nil)
        try continuation.pointee.resume(returning: FfiConverterUInt64.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerUInt64TypeSmartAccountError(
    rawContinutation: UnsafeRawPointer,
    returnValue: UInt64,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<UInt64, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: FfiConverterTypeSmartAccountError.lift)
        try continuation.pointee.resume(returning: FfiConverterUInt64.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerBoolTypeSmartAccountError(
    rawContinutation: UnsafeRawPointer,
    returnValue: Int8,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<Bool, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: FfiConverterTypeSmartAccountError.lift)
        try continuation.pointee.resume(returning: FfiConverterBool.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerString(
    rawContinutation: UnsafeRawPointer,
    returnValue: RustBuffer,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<String, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: nil)
        try continuation.pointee.resume(returning: FfiConverterString.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerStringTypeSmartAccountError(
    rawContinutation: UnsafeRawPointer,
    returnValue: RustBuffer,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<String, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: FfiConverterTypeSmartAccountError.lift)
        try continuation.pointee.resume(returning: FfiConverterString.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerTypeSmartAccountTypeSmartAccountError(
    rawContinutation: UnsafeRawPointer,
    returnValue: UnsafeMutableRawPointer,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<SmartAccount, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: FfiConverterTypeSmartAccountError.lift)
        try continuation.pointee.resume(returning: FfiConverterTypeSmartAccount.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerTypeSmartAccountBuilder(
    rawContinutation: UnsafeRawPointer,
    returnValue: UnsafeMutableRawPointer,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<SmartAccountBuilder, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: nil)
        try continuation.pointee.resume(returning: FfiConverterTypeSmartAccountBuilder.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerTypeSmartAccountBuilderTypeSmartAccountError(
    rawContinutation: UnsafeRawPointer,
    returnValue: UnsafeMutableRawPointer,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<SmartAccountBuilder, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: FfiConverterTypeSmartAccountError.lift)
        try continuation.pointee.resume(returning: FfiConverterTypeSmartAccountBuilder.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerTypeSimulateResultTypeSmartAccountError(
    rawContinutation: UnsafeRawPointer,
    returnValue: RustBuffer,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<SimulateResult, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: FfiConverterTypeSmartAccountError.lift)
        try continuation.pointee.resume(returning: FfiConverterTypeSimulateResult.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerOptionTypeTransactionReceiptTypeSmartAccountError(
    rawContinutation: UnsafeRawPointer,
    returnValue: RustBuffer,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<TransactionReceipt?, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: FfiConverterTypeSmartAccountError.lift)
        try continuation.pointee.resume(returning: FfiConverterOptionTypeTransactionReceipt.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerSequenceUInt8(
    rawContinutation: UnsafeRawPointer,
    returnValue: RustBuffer,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<[UInt8], Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: nil)
        try continuation.pointee.resume(returning: FfiConverterSequenceUInt8.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerSequenceUInt8TypeSmartAccountError(
    rawContinutation: UnsafeRawPointer,
    returnValue: RustBuffer,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<[UInt8], Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: FfiConverterTypeSmartAccountError.lift)
        try continuation.pointee.resume(returning: FfiConverterSequenceUInt8.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

public func setupTracing(_ filter: String) {
    try! rustCall {
        uniffi_shared_fn_func_setup_tracing(
            FfiConverterString.lower(filter), $0
        )
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 22
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_shared_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_shared_checksum_func_setup_tracing() != 23859 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccount_address() != 57724 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccount_app_id() != 8541 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccount_chain() != 31244 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccount_is_deployed() != 29375 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccount_keyset_json() != 42583 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccount_nonce() != 9274 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccount_send_transactions() != 52880 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccount_sign_hash() != 19627 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccount_sign_message() != 55038 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccount_sign_typed_data() != 20496 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccount_simulate_transactions() != 1471 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccount_switch_chain() != 38913 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccount_wait_for_transaction() != 9892 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccountbuilder_add_chain_option() != 12444 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccountbuilder_add_email_guardian_key() != 49619 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccountbuilder_add_guardian_keys() != 63158 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccountbuilder_add_open_id_guardian_key() != 44109 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccountbuilder_add_open_id_with_email_guardian_key() != 62133 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccountbuilder_build() != 58869 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccountbuilder_with_active_chain() != 10208 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccountbuilder_with_app_id() != 14169 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccountbuilder_with_keyset_json() != 31804 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccountbuilder_with_master_key() != 50082 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccountbuilder_with_master_key_signer() != 43948 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_smartaccountbuilder_with_unipass_server_url() != 30405 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_constructor_smartaccountbuilder_new() != 30481 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_signer_address() != 15807 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_shared_checksum_method_signer_sign_message() != 16910 {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiInitForeignExecutor()
    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
